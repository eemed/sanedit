# https://taskfile.dev

version: '3'

vars:
  LOG_FILE: /tmp/sanedit.log
  UCD_VERSION: 15.0.0
  UCD_DIR: /tmp/ucd-{{ .UCD_VERSION }}
  PRECOMMIT_FILE: .git/hooks/pre-commit

tasks:
  release:build:
    desc: Build a release build
    dir: crates
    deps: [install-pre-commit-hook]
    cmds:
      - cargo build --release

  release:deb:
    desc: Build a deb package
    dir: crates
    deps: [install-pre-commit-hook]
    cmds:
        - mkdir -p ../deb
        - cargo deb -p sanedit-cli -o ../deb

  release:run:
    desc: Build and run the release build
    dir: crates
    deps: [install-pre-commit-hook]
    cmds:
      - cargo run --bin sane --release

  build:
    desc: Build a debug build
    dir: crates
    deps: [install-pre-commit-hook]
    cmds:
      - cargo build

  flamegraph:
    desc: Build and run with release build and produce a flamegraph of the session
    dir: crates
    deps: [flamegraph:prepare, install-pre-commit-hook]
    cmds:
      - rm -rf perf.data* flamegraph.svg
      - cargo flamegraph --profile perf --verbose --bin sane -- --config-dir ../runtime/config

  flamegraph:prepare:
    desc: Prepare to capture using perf
    cmds:
      - echo 0 | sudo tee /proc/sys/kernel/perf_event_paranoid

  run:
    desc: Build and run the debug build
    dir: crates
    deps: [install-pre-commit-hook]
    cmds:
      - cargo run --bin sane -- --debug --config-dir ../runtime
    env:
      RUST_BACKTRACE: 1

  debug-glob:
    desc: Build and run the debug glob pattern
    dir: crates
    requires:
      vars: [INPUT, PATTERN]
    cmds:
      - echo "{{ .INPUT }}" | cargo run --bin syntax -- --rules "{{ .PATTERN }}" --glob --print-rules --print-byte-code --print-captures

  debug-regex:
    desc: Build and run the debug regex pattern
    dir: crates
    requires:
      vars: [INPUT, PATTERN]
    cmds:
      - echo "{{ .INPUT }}" | cargo run --bin syntax -- --rules "{{ .PATTERN }}" --regex --print-rules --print-byte-code --print-captures

  debug-peg:
    desc: Build and run the debug regex pattern
    dir: crates
    requires:
      vars: [INPUT, PATTERN]
    cmds:
      - echo "{{ .INPUT }}" | cargo run --bin syntax -- --rules "{{ .PATTERN }}" --print-rules --print-byte-code --print-captures

  run:debug:
    desc: Build and run the debug build with debug logging
    dir: crates
    deps: [install-pre-commit-hook]
    cmds:
      - cargo run --bin sane -- --config-dir ../runtime --debug
    env:
      RUST_BACKTRACE: 1

  test:
    desc: Run tests
    dir: crates
    cmds:
      - cargo test -- --nocapture {{ .CLI_ARGS }}

  bench:
    desc: Run benchmarks
    dir: crates
    cmds:
      - cargo bench

  log:
    desc: Tail the log file
    dir: crates
    cmds:
      - touch {{ .LOG_FILE }}
      - tail -f {{ .LOG_FILE }}

  download:ucd:
    desc: Download unicode character database
    internal: true
    cmds:
      - rm -rf {{ .UCD_DIR }}
      - mkdir -p {{ .UCD_DIR }}
      - cd {{ .UCD_DIR }} && curl -LO https://www.unicode.org/Public/zipped/{{ .UCD_VERSION }}/UCD.zip
      - unzip {{ .UCD_DIR }}/UCD.zip -d {{ .UCD_DIR }}
    status:
      - test -d {{ .UCD_DIR }}

  generate:ucd-run:
    desc: Generate UCD tables to the ucd crate
    internal: true
    dir: crates/ucd/src
    cmds:
      - ucd-generate word-break {{ .UCD_DIR }} --enum > word_break.rs
      - ucd-generate sentence-break {{ .UCD_DIR }} --enum > sentence_break.rs
      - ucd-generate grapheme-cluster-break {{ .UCD_DIR }} --enum > grapheme_break.rs
      - ucd-generate general-category {{ .UCD_DIR }} --enum > general_category.rs
      - ucd-generate property-bool {{ .UCD_DIR }} --include Extended_Pictographic > properties.rs

  generate:ucd:
    desc: Regenerate unicode tables in the ucd crate
    cmds:
      - task: download:ucd
      - task: generate:ucd-run
      - task: format

  format:
    desc: Run code formatter on all files
    dir: crates
    cmds:
      - cargo fix --workspace --allow-dirty --allow-staged
      - cargo fmt

  clippy:
    desc: Run code clippy on crates
    dir: crates
    cmds:
      - cargo clippy

  check:
    desc: Run code checks on all files
    dir: crates
    cmds:
      - cargo fmt --check
      - cargo build
    env:
      RUSTFLAGS: "-D warnings"

  clean:
    desc: Clean up working directories
    dir: crates
    cmds:
      - rm -rf {{ .UCD_DIR }}
      - rm -rf {{ .LOG_FILE }}
      - cargo clean

  debug:kill:
    desc: Kill debug run process
    cmds:
      - ps aux | grep target | grep sane | awk '{ print $2 }' | xargs kill -9

  install-pre-commit-hook:
    internal: true
    cmds:
      - echo "task pre-commit" > {{ .PRECOMMIT_FILE }}
      - chmod +x {{ .PRECOMMIT_FILE }}
    status:
      - test -f {{ .PRECOMMIT_FILE }}

  pre-commit:
    desc: Run pre-commit operations
    cmds:
      - task: check

  docs:images:
    internal: true
    dir: docs/images
    cmds:
      - cmd: find ../dia -type f -name '*.dia' -exec dia -t png -s 1024x {} \;

  docs:
    desc: Build documentation
    dir: docs
    deps: [docs:images]
    cmds:
      - typst compile impl-notes.typ implementation-notes.pdf

  docs:watch:
    desc: Watch and compile when typst files change
    dir: docs
    deps: [docs:images]
    cmds:
      - typst watch impl-notes.typ implementation-notes.pdf

  docs:open:
    desc: Open documentation pdf
    dir: docs
    cmds:
      - gio open implementation-notes.pdf

  release:install-deb:
    desc: Build release deb and install it to local machine
    deps: [release:deb]
    cmds:
      - sudo apt remove -y sanedit
      - sudo apt install -y ./deb/sanedit_*.deb


  jit:test:
    desc: Run parser JIT tests
    dir: crates/parser
    cmds:
      - "cargo test -- jit:: --nocapture"
    env:
      RUST_BACKTRACE: 1

  default:
    cmds:
      - task -l
    silent: true
