document = (separated / (!stop .)* stop)*;
separated = todo / tuple / keyword / type / string / constant / comment / preproc / operator / alpha;

alpha = [a..zA..Z0..9_]+;
stop = ws+ / "[" / "]" / "(" / ")" / ";" / "<" / ">" / "," / ":" / "." / "}" / ":";
WHITESPACE = [ \t] / nl;
nl = "\n" / "\r\n";
ws = WHITESPACE;

@show @highlight
keyword = ("macro_rules!" / "unsafe" / "static" / "loop" / "let" / "match" / "if" / "else" / "while" /
          "break" / "continue" / "move" / "async" / "dyn" / "return" /
          "for" / "in" / "as" / "pub(crate)" / "pub(super)" / "pub" / "use" /
          "fn" / "impl" / "struct" / "enum" / "const" / "trait" / "where" /
          "type" / "crate"  / "extern" / "mod" / "self" / "ref" / "await" ) &stop;

# Constants
@show @highlight
constant = number / boolean / uppercase_constant;

boolean = ("false" / "true") &stop;
number = "0b" ("0" / "1" / "_")* / "0x" hexdigit+ / "-"? digit+ number_types?;
digit = [0..9_];
hexdigit = digit / [a..fA..F];
number_types = "usize" / "isize" / "f64" / "f32" / "u8" / "u16" / "u32" / "u64" / "i8" / "i16" / "i32" / "i64" / "i128" / "u128";
@show @highlight(constant)
uppercase_constant = [A..Z] [A..Z0..9_]+ &stop;

tuple = [a..z]+ "." number &stop;


# Strings
@show @highlight
string = char / sstring / rawstring;
char = "b"? "'" (ch_block / escape / [\u{0}..\u{10ffff}]) "'";
ch_block = "\\" . "{" (!"}" .)* "}";
sstring = ("b" / "c")? "\"" (escape / replace / [^"])* "\"";
rawstring = "r#\"" (escape / (!"\"#" .))* "\"#";
escape = "\\" .;
replace = !"{{" "{" replacement "}";
@show @highlight(default)
replacement = [^"}]*;


# Types
type = (builtintype / combipath /  typepath ) &stop;
path = path_sep? (pathname path_sep)+;
@show @highlight(operator)
path_sep = "::";
typepath = path? typename (path_sep typename)?;
functionpath = path pathname;
pathname = [a..z0..9_]+;
typename = uppercase_constant / capitalized_type;
@show @highlight(type)
capitalized_type = [A..Z] [a..zA..Z0..9_]*;
@show @highlight(type)
builtintype = ("str" / "char" / "bool" / number_types) !"(";

# Proper but not needed now
# normal_type = capitalized_type angle?;
# angle = "<" (ws* ","? ws* (lifetime / normal_type / builtintype))* ">";

combipath = path "{" ((ws / nl)* (combipath / typepath / functionpath) ","?)+ (ws / nl)* "}";


# Operators
@show @highlight
operator = marks / "mut" &(ws / nl);
marks = [\[\]{}():,.<>&|=+*/?<>!-];

# Preprocessor
preproc = derive / lifetime / macro;
@show @highlight(preproc)
derive =  "#" "!"? "[" (!"]" .)* "]";
@show @highlight(preproc)
lifetime = "'" [a..z]+;

@show @highlight(preproc)
macro = [a..z] [a..z0..9_]+ "!";


# Comments
@show @highlight
comment = line_comment / block_comment;
line_comment = "//" (todo / (!nl .))*;
block_comment = "/*" (todo / (!"*/" .))* "*/";

@show @highlight(warn)
todo = "TODO";
