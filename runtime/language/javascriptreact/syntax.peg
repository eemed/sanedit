document = document_items*;
document_items =  block_match / jsx / string / keyword / preproc / constant /
    comment / class / types  / alpha / ops /  ws+ / . ;

block_match = block_open (!block_close document_items)* block_close;
@show @highlight(operator)
block_open = "{";
@show @highlight(operator)
block_close = "}";

WHITESPACE = [ \t] / nl;
ws = WHITESPACE;
nl = "\n" / "\r\n";

alpha = [a..zA..Z0..9_]+;
@show @highlight(type)
class = [A..Z] alpha;

@show @highlight(operator)
ops = [\[\]{}():,.<>&|=+*/?!<>-];

@show @highlight(constant)
constant = "true" / "false" / "undefined" / "null" / "globalThis" / "arguments" / number;

@show @highlight(comment)
comment = line_comment / block_comment;
line_comment = "//" (!nl .)* nl;
block_comment = "/*" (!"*/" .)* "*/";

number = "-"? digit+ ("." digit+)? ("e" "-"? digit+)? / "-"? "Infinity" / "NaN" / "0x" hexdigit+;
digit = [0..9];
hexdigit = digit / [a..fA..F];

@show @highlight
string    = "\"" nstring "\"" / "'" sstring "'" / "`" tstring "`" ;
nstring    = ("\\" escape_char / [^"\n])*;
sstring    = ("\\" escape_char / [^'\n])*;
tstring    = ("\\" escape_char / replace / [^`\n])*;
escape_char     = "0" / "t" / "n" / "r" / "'" / "`" / "\"" / "\\";
@show @highlight(operator)
replace = "${" replacement "}";
@show @highlight(string)
replacement = [^}]*;

jsx = tag;

tag = tag_with_children / one_tag;
tag_with_children = tag_open (!tag_close tag_children)* tag_close;

tag_children = jsx_comment / jsx_code / tag / . ;
jsx_code = block_open (!block_close document_items)* block_close;
@show @highlight(comment)
jsx_comment = "{/*" (!"*/}" .)* "*/}";
@whitespaced
one_tag = "<" tagname tagattr* "/>";
@whitespaced
tag_open = "<" tagname tagattr* ">";
@whitespaced
tag_close ="</" tagname ">";

@show @highlight(type)
tagname = [a..zA..Z0..9]+ ("." [a..zA..Z0..9]+)*;
tagattr = attrname (tagattr_eq attrvalue)? / comment;
@show @highlight(operator)
tagattr_eq = "=";
attrvalue = string / block_open (!block_close document_items)* block_close;

@show @highlight(default)
attrname = [a..zA..Z0..9_-]+;

end = ws / ";" / "(" / "." / ":";

@show @highlight(preproc)
preproc = preproc_words &end / special &end;
preproc_words = "import" / "from" / "export" / "default" !":" / "as";
special = "console";

@show @highlight(keyword)
keyword =  words &end;
words = "constructor" / "yield" / "await" / "instanceof" / "while" / "break" / "constructor" / "class" / "extends" / "static" / "const" / "async" / "if" / "else" / "for" / "return" / "switch" / "case" / "let" / "var" / "in" / "of" / "function" "*"? / "with" / "this" /  "try" / "catch" !"(" / "continue" / "throw" / "new" / "default" ;

@show @highlight(type)
types =  (
    "Object" /
    "Function" /
    "Boolean" /
    "Symbol" /
    "Error" /
    "AggregateError" /
    "EvalError" /
    "RangeError" /
    "ReferenceError" /
    "SyntaxError" /
    "TypeError" /
    "URIError" /
    "InternalError " /
    "Number" /
    "BigInt" /
    "Math" /
    "Date" /
    "Temporal" /
    "String" /
    "RegExp" /
    "TypedArray" /
    "Int8Array" /
    "Uint8Array" /
    "Uint8ClampedArray" /
    "Int16Array" /
    "Uint16Array" /
    "Int32Array" /
    "Uint32Array" /
    "BigInt64Array" /
    "BigUint64Array" /
    "Float16Array" /
    "Float32Array" /
    "Float64Array" /
    "Map" /
    "Set" /
    "WeakMap" /
    "WeakSet" /
    "ArrayBuffer" /
    "SharedArrayBuffer" /
    "DataView" /
    "Atomics" /
    "JSON" /
    "Array" /
    "WeakRef" /
    "FinalizationRegistry" /
    "Iterator" /
    "AsyncIterator" /
    "Promise" /
    "GeneratorFunction" /
    "AsyncGeneratorFunction" /
    "Generator" /
    "AsyncGenerator" /
    "AsyncFunction" /
    "Reflect" /
    "Proxy" /
    "Intl") &end;
