document = document_items*;
document_items =  block_match / jsx / comment / string / keyword / preproc / constant /
    class / types  / alpha / ops /  (!end .)+ / ws+ / . ;

block_match = block_open (!block_close document_items)* block_close;
@show @highlight(operator)
block_open = "{";
@show @highlight(operator)
block_close = "}";

WHITESPACE = [ \t] / nl;
ws = WHITESPACE;
nl = "\n" / "\r\n";

alpha = [a..zA..Z0..9_]+;
@show @highlight(type)
class = [A..Z] alpha;

@show @highlight(operator)
ops = [\[\]{}():,.<>&|=+*/?!<>-];

@show @highlight(constant)
constant = "true" / "false" / "undefined" / "null" / "globalThis" / "arguments" / number / uppercase_constant;

constant_end = ws / ";" / ")" / "." / ":" / "=" / "," / "}" / "]" / "[";
uppercase_constant = [A..Z] [A..Z0..9_]* &constant_end;

@show @highlight(comment)
comment = line_comment / block_comment;
line_comment = "//" (!nl .)* nl;
block_comment = "/*" (!"*/" .)* "*/";

number = "-"? ("0" ("x" / "X") hexdigit+ / "0" ("b" / "B") ("0" / "1")+ / "0" ("o" / "O") digit+ / digit+ ("." digit+)? ("e" "-"? digit+)? / "Infinity" / "NaN" );
digit = [0..9];
hexdigit = digit / [a..fA..F];

@show @highlight
string    = nstring / sstring / tstring / restring;
nstring    = "\"" (escape / [^"\n])* "\"";
sstring    = "'"  (escape / [^'\n])* "'";
tstring    = "`" (escape / replace / [^`\n])* "`";
restring   = "/" (escape / [^/\n])+ "/";
@show @highlight(keyword)
escape     = "\\" ("0" / "t" / "n" / "r" / "'" / "`" / "\"" / "\\" / "/");
@show @highlight(operator)
replace = "${" replacement "}";
@show @highlight(string)
replacement = [^}]*;

jsx = tag;

tag = tag_with_children / one_tag;
tag_with_children = tag_open (!tag_close tag_children)* tag_close;

tag_children = jsx_comment / jsx_code / tag / . ;
jsx_code = block_open (!block_close document_items)* block_close;
@show @highlight(comment)
jsx_comment = "{/*" (!"*/}" .)* "*/}";
@whitespaced
one_tag = "<" tagname tagattr* "/>";
@whitespaced
tag_open = "<" tagname tagattr* ">";
@whitespaced
tag_close ="</" tagname ">";

@show @highlight(type)
tagname = [a..zA..Z0..9]+ ("." [a..zA..Z0..9]+)*;
tagattr = attrname (tagattr_eq attrvalue)? / comment / block_open (!block_close document_items)* block_close ;
@show @highlight(operator)
tagattr_eq = "=";
attrvalue = string / block_open (!block_close document_items)* block_close;

@show @highlight(default)
attrname = [a..zA..Z0..9_-]+;

@show @highlight(preproc)
preproc = preproc_words;
preproc_words = ("import" / "from" / "export" / "default" !":" / "as") &ws;
@show @highlight(special)
special = "console" &(ws / ".");

end = ws / ";" / "(" / "." / ":" / "=" / ",";
@show @highlight(keyword)
keyword =  words / simple_words / "default" &(ws / ":");
simple_words = ("yield" / "await" / "instanceof" / "break"/ "extends" / "static" / "const" / "async" / "return"/ "in" / "of" / "continue" / "let" / "var" ) &(ws / ";");
words = ("constructor" / "while"  / "constructor" / "class"   / "if" / "else" / "for"  / "switch" / "case" / "function" "*"? / "with" / "this" /  "try" / "catch" !"(" /  "throw" / "new") &end;

@show @highlight(type)
types =  (
    "Object" /
    "Function" /
    "Boolean" /
    "Symbol" /
    "Error" /
    "AggregateError" /
    "EvalError" /
    "RangeError" /
    "ReferenceError" /
    "SyntaxError" /
    "TypeError" /
    "URIError" /
    "InternalError " /
    "Number" /
    "BigInt" /
    "Math" /
    "Date" /
    "Temporal" /
    "String" /
    "RegExp" /
    "TypedArray" /
    "Int8Array" /
    "Uint8Array" /
    "Uint8ClampedArray" /
    "Int16Array" /
    "Uint16Array" /
    "Int32Array" /
    "Uint32Array" /
    "BigInt64Array" /
    "BigUint64Array" /
    "Float16Array" /
    "Float32Array" /
    "Float64Array" /
    "Map" /
    "Set" /
    "WeakMap" /
    "WeakSet" /
    "ArrayBuffer" /
    "SharedArrayBuffer" /
    "DataView" /
    "Atomics" /
    "JSON" /
    "Array" /
    "WeakRef" /
    "FinalizationRegistry" /
    "Iterator" /
    "AsyncIterator" /
    "Promise" /
    "GeneratorFunction" /
    "AsyncGeneratorFunction" /
    "Generator" /
    "AsyncGenerator" /
    "AsyncFunction" /
    "Reflect" /
    "Proxy" /
    "Intl") &end;
