document = ( no_jsx / jsx / (!stop .)* stop)*;
no_jsx = string / keyword / preproc / constant / comment / operator / func / types;
WHITESPACE = [ \t];
ws = WHITESPACE;
nl = "\n" / "\r\n";
stop = WHITESPACE+ / "(" / ")" / "[" / ";" / "." / nl;

@show @highlight(preproc)
preproc = preproc_words &stop;
preproc_words = "import" / "from" / "export" / "default" / "as";

@show @highlight(keyword)
keyword =  words &stop;
words = "instanceof" / "while" / "break" / "constructor" / "class" / "extends" / "static" / "const" / "async" / "if" / "else" / "for" / "return" / "switch" / "case" / "let" / "var" / "in" / "of" / "function" "*"? / "with" / "this" /  "try" / "catch" / "continue" / "throw" / "new";

@show @highlight(type)
types =  (
    "console" /
    "Object" /
    "Function" /
    "Boolean" /
    "Symbol" /
    "Error" /
    "AggregateError" /
    "EvalError" /
    "RangeError" /
    "ReferenceError" /
    "SyntaxError" /
    "TypeError" /
    "URIError" /
    "InternalError " /
    "Number" /
    "BigInt" /
    "Math" /
    "Date" /
    "Temporal" /
    "String" /
    "RegExp" /
    "TypedArray" /
    "Int8Array" /
    "Uint8Array" /
    "Uint8ClampedArray" /
    "Int16Array" /
    "Uint16Array" /
    "Int32Array" /
    "Uint32Array" /
    "BigInt64Array" /
    "BigUint64Array" /
    "Float16Array" /
    "Float32Array" /
    "Float64Array" /
    "Map" /
    "Set" /
    "WeakMap" /
    "WeakSet" /
    "ArrayBuffer" /
    "SharedArrayBuffer" /
    "DataView" /
    "Atomics" /
    "JSON" /
    "Array" /
    "WeakRef" /
    "FinalizationRegistry" /
    "Iterator" /
    "AsyncIterator" /
    "Promise" /
    "GeneratorFunction" /
    "AsyncGeneratorFunction" /
    "Generator" /
    "AsyncGenerator" /
    "AsyncFunction" /
    "Reflect" /
    "Proxy" /
    "Intl") &stop;

@show @highlight(function)
func = [a..z] [a..zA..Z0..9]* &"(";

operator = ternary / ops;
@show @highlight(operator)
ops = "yield" / "await" /  "=>" / "=" "="? "="? / "!=" "="? / "..." / "&&" / "||" / ":" / "?" / "+=" / "-=" /
    ((">" / "<" / "*" / "/" / "+" / "-") &stop);
ternary = [a..z][A..Za..z0..9]* ternary_op  &stop;
@show @highlight(operator)
ternary_op = ("++" / "--");

@show @highlight(constant)
constant = "true" / "false" / "undefined" / "null" / "globalThis" / "arguments" / number;

@show @highlight(comment)
comment = line_comment / block_comment;
line_comment = "//" (!nl .)* nl;
block_comment = "/*" (!"*/" .)* "*/";

number = "-"? digit+ ("." digit+)? ("e" "-"? digit+)? / "-"? "Infinity" / "NaN" / "0x" hexdigit+;
digit = [0..9];
hexdigit = digit / [a..fA..F];

@show @highlight
string    = "\"" nstring "\"" / "'" sstring "'" / "`" tstring "`" ;
nstring    = ("\\" escape_char / [^"\n])*;
sstring    = ("\\" escape_char / [^'\n])*;
tstring    = ("\\" escape_char / replace / [^`\n])*;
escape_char     = "0" / "t" / "n" / "r" / "'" / "`" / "\"" / "\\";
@show @highlight(operator)
replace = "${" replacement "}";
@show @highlight(default)
replacement = [^}]*; 

jsx = tag;
@show @highlight(keyword)
tag = "<" "/"? ws* tagname (ws* tagattr)* ws* "/"? ">";
@show @highlight(type)
tagname = (!(ws / ">" / "/") .)+;
@show @highlight(default)
tagattr = attrname ("=" attrvalue)?;
attrvalue = string / attrref;
attrref = "{" (!"}" ( no_jsx / attrref / .))* "}";

@show @highlight(identifier)
attrname = (!(ws / "=" /  "/" / ">") .)+;
