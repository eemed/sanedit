document = (separated / (!stop .)* stop)*;
separated = todo / keyword / string / constant / comment / preproc / type / operator;

stop = ws+ / nl / "[" / "]" / "(" / ")" / ";" / "<" / ">" / "," / ":" / ".";
WHITESPACE = [ \t];
nl = "\n" / "\r\n";
ws = WHITESPACE;

@show @highlight
keyword = ("loop" / "let" / "match" / "if" / "else" / "while" /
          "break" / "move" / "async" / "dyn" / "return" / "for" /
          "in" / "as" / "pub(crate)" / "pub(super)" / "pub" / "use" /
          "fn" / "impl" / "struct" / "enum" / "const" / "trait" /
          "type" / "crate"  / "extern" / "mod" / "self" / "ref" ) &stop;

@show @highlight
constant = number;


number = "-"? digit+ number_types? !"."/ "0x" hexdigit+;
digit = [0..9];
hexdigit = digit / [a..fA..F];
number_types = "usize" / "isize" / "f64" / "f32" / "u8" / "u16" / "u32" / "u64" / "i8" / "i16" / "i32" / "i64" / "i128" / "u128";


@show @highlight
string = char / sstring / rawstring;
char = "'" . "'";
sstring = "b"? "\"" (escape / replace / [^"])* "\"";
rawstring = "r#" (escape / replace / [^#])* "#";
escape = "\\" .;
replace = !"{{" "{" replacement "}";
@show @highlight(default)
replacement = [^}]*;


type = (combipath / ( typepath / builtintype / typeangle) &stop);
path = "::"? (pathname "::")+;
typepath = path? typename ("::" typename)?;
functionpath = path pathname;
pathname = [a..z0..9_]+;
@show @highlight(type)
typename = [A..Z] [a..zA..Z0..9_]*;
@show @highlight(type)
builtintype = "str" / "char" / "bool" / number_types;
typeangle = "<" (lifetime / type / ws)* ">";
combipath = path "{" ((ws / nl)* (combipath / typepath / functionpath) ","?)+ (ws / nl)* "}";


operator = closure / operators;
@show @highlight(operator)
operators = "|" "|"? / "&&" / "?" / "=" "="? / "!=" / ".." / "+" / "-" / "/" / "*" / "<" "="? " " / ">" "="? " " / "&" / "mut";
closure =  bar (type / (!(bar / nl) .))* bar;
@show @highlight(operator)
bar = "|";


preproc = derive / lifetime;
@show @highlight(preproc)
derive =  "#" "!"? "[" (!"]" .)* "]";
@show @highlight(preproc)
lifetime = "'" [a..z]+;


@show @highlight
comment = line_comment / block_comment;
line_comment = "//" (todo / (!nl .))*;
block_comment = "/*" (todo / (!"*/" .))* "*/";


@show @highlight(warn)
todo = "TODO";
