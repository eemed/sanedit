version: '3'

vars:
  LOG_FILE: '{{.HOME}}/.local/share/sanedit/tmp/sanedit-debug.log'
  LOG_FILE_CLIENT: '{{.HOME}}/.local/share/sanedit/tmp/sanedit-debug-client.log'
  UCD_VERSION: 16.0.0
  UCD_DIR: /tmp/ucd-{{ .UCD_VERSION }}
  TARGET: x86_64-unknown-linux-musl

tasks:
  release:build:
    desc: Build a release build
    dir: crates
    cmds:
      - cargo build --release --target={{.TARGET}}

  release:deb:
    desc: Build a deb package
    dir: crates
    cmds:
        - task: release:build
        - mkdir -p ../deb
        - cargo deb --target={{.TARGET}} -p sanedit-cli -o ../deb --no-build

  install:
    desc: Download and install development requirements
    dir: crates
    cmds:
      - rustup target add {{.TARGET}}
      - cargo install ucd-generate cargo-deb flamegraph
      - task: generate:ucd
      - task: format

  build:
    desc: Build a debug build
    dir: crates
    cmds:
      - cargo build

  flamegraph:
    desc: Build and run with release build and produce a flamegraph of the session
    dir: crates
    cmds:
      - echo 0 | sudo tee /proc/sys/kernel/perf_event_paranoid
      - rm -rf perf.data* flamegraph.svg
      - cargo flamegraph --profile perf --verbose --bin sane -- --config-dir ../runtime/config

  run:
    desc: Build and run the debug build
    dir: crates
    cmds:
      - rm -f /tmp/sanedit-debug.sock
      - rm -f {{.LOG_FILE}} {{.LOG_FILE_CLIENT}}
      - cargo run --bin sane -- --server-only --session debug --debug --config-dir ../runtime &
      - |
        until [ -e /tmp/sanedit-debug.sock ]; do \
          sleep 0.1; \
        done
      - cargo run --bin sane -- --debug --session debug --config-dir ../runtime
    env:
      RUST_BACKTRACE: 1

  debug:glob:
    desc: Build and run the debug glob pattern
    dir: crates
    requires:
      vars: [INPUT, PATTERN]
    cmds:
      - echo "{{ .INPUT }}" | cargo run --bin syntax -- --rules "{{ .PATTERN }}" --glob --print-rules --print-byte-code --print-captures

  debug:regex:
    desc: Build and run the debug regex pattern
    dir: crates
    requires:
      vars: [INPUT, PATTERN]
    cmds:
      - echo "{{ .INPUT }}" | cargo run --bin syntax -- --rules "{{ .PATTERN }}" --regex --print-rules --print-byte-code --print-captures

  debug:peg:
    desc: Build and run the debug regex pattern
    dir: crates
    requires:
      vars: [INPUT, PATTERN]
    cmds:
      - echo "{{ .INPUT }}" | cargo run --bin syntax -- --rules "{{ .PATTERN }}" --print-rules --print-byte-code --print-captures

  debug:run:
    desc: Build and run the debug build with debug logging
    dir: crates
    cmds:
      - cargo run --bin sane -- --config-dir ../runtime --debug
    env:
      RUST_BACKTRACE: 1

  test:
    desc: Run tests
    dir: crates
    cmds:
      - cargo test -- --nocapture {{ .CLI_ARGS }}

  bench:
    desc: Run benchmarks
    dir: crates
    cmds:
      - cargo bench

  log:
    desc: Tail the log file
    dir: crates
    cmds:
      - tail -f {{ .LOG_FILE }}

  generate:ucd:
    desc: Download and regenerate unicode tables in the ucd crate
    internal: true
    cmds:
      - rm -rf {{ .UCD_DIR }}
      - mkdir -p {{ .UCD_DIR }}
      - cd {{ .UCD_DIR }} && curl -LO https://www.unicode.org/Public/zipped/{{ .UCD_VERSION }}/UCD.zip
      - unzip {{ .UCD_DIR }}/UCD.zip -d {{ .UCD_DIR }}
      - ucd-generate word-break {{ .UCD_DIR }} --enum > crates/ucd/src/word_break.rs
      - ucd-generate sentence-break {{ .UCD_DIR }} --enum > crates/ucd/src/sentence_break.rs
      - ucd-generate grapheme-cluster-break {{ .UCD_DIR }} --enum > crates/ucd/src/grapheme_break.rs
      - ucd-generate general-category {{ .UCD_DIR }} --enum > crates/ucd/src/general_category.rs
      - ucd-generate property-bool {{ .UCD_DIR }} --include Extended_Pictographic > crates/ucd/src/properties.rs
    status:
      - test -d {{ .UCD_DIR }}

  format:
    desc: Run code formatter on all files
    dir: crates
    cmds:
      - cargo fix --workspace --allow-dirty --allow-staged
      - cargo fmt

  clippy:
    desc: Run code clippy on crates
    dir: crates
    cmds:
      - cargo clippy

  check:
    desc: Run code checks on all files
    dir: crates
    cmds:
      - cargo fmt --check
      - cargo build
    env:
      RUSTFLAGS: "-D warnings"

  clean:
    desc: Clean up working directories
    dir: crates
    cmds:
      - rm -rf {{ .UCD_DIR }}
      - rm -rf {{ .LOG_FILE }}
      - cargo clean

  debug:kill:
    desc: Kill debug process
    cmds:
      - ps aux | grep "target/debug/sane" | awk '{ print $2 }' | xargs kill -9

  docs:images:
    internal: true
    dir: docs/images
    cmds:
      - cmd: find ../dia -type f -name '*.dia' -exec dia -t png -s 1024x {} \;

  docs:
    desc: Build documentation
    dir: docs
    deps: [docs:images]
    cmds:
      - typst compile impl-notes.typ implementation-notes.pdf

  docs:watch:
    desc: Watch and compile when typst files change
    dir: docs
    deps: [docs:images]
    cmds:
      - typst watch impl-notes.typ implementation-notes.pdf

  docs:open:
    desc: Open documentation pdf
    dir: docs
    cmds:
      - gio open implementation-notes.pdf

  release:install-deb:
    desc: Build release deb and install it to local machine
    deps: [release:deb]
    cmds:
      - sudo apt remove -y sanedit
      - sudo apt install -y ./deb/sanedit_*.deb

  default:
    cmds:
      - task -l
    silent: true
